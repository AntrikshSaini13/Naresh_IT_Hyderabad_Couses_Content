01-02-2024
----------
* Method Overriding :
---------------------
Writing two or more methods in the super and sub class in such a way that method 
signature(method name along with method parameter) of both the methods  must be 
same in the super and sub classes. 

While working with method overriding generally we can't change the return type of the 
method but from JDK 1.5 onwards we can change the return type of the method in only 
one case that is known as Co-Variant.

Without inheritance method overriding is not possible that means if there is no 
inheritance there is no method overriding.
--------------------------------------------------------------------------
What is the advantage of Method Overriding ?
-------------------------------------------
The advantage of Method Overriding is, each class is specifying its own specific behavior.
-------------------------------------------------------------------------
Upcasting :- 
------------
It is possble to assign sub class object to super class reference variable using dynamic polymorphism. It is known as Upcasting.

Example:-    Animal a = new Lion();  //valid [upcasting]

Downcasting :
---------------
By default downcasting is not possible, Here we are trying to assign super class object to sub class reference variable but the same 
we can achieve by using explicit type casting. It is known as downcasting.

Eg:-    Lion l = new Animal(); //Invalid

	  Lion l = (Lion) new Animal(); //Valid because Explicit type casting

	  But by using above statement (Downcasting) whenever we call a method we will get a runtime exception called java.lang.
ClassCastException. [Animal cann't be  cast to Lion]
--------------------------------------------------------------------------
//Method Overriding Program
---------------------------
MethodOverriding.java
---------------------

class Animal
{
	public void eat()
	{
       System.out.println("Generic Eating");
	}
}
class Lion extends Animal
{
	public void eat()
	{
       System.out.println("Non Veg type Animal");
	}   
}
public class MethodOverriding
{
    public static void main(String args[]) 
    {
    	Animal a = new Lion(); 
		a.eat(); 	
    }
}
-------------------------------------------------------------------------
Method Overriding Program 
--------------------------
MethodOverridingBird.java
-------------------------
class Bird
{
	public void fly()
	{
      System.out.println("Generic Bird is flying");
	}
}

class Parrot extends Bird
{
	public void fly()
	{
      System.out.println("Parrot Bird is flying");
	}
}

class Peacock extends Bird
{
	public void fly()
	{
      System.out.println("Peacock Bird is flying");
	}
}
public class MethodOverridingBird 
{
	public static void main(String[] args) 
	{
		Bird b;

        	b = new Parrot(); 
		b.fly();  //Dynamic Method Dispatch

        	b = new Peacock(); b.fly(); //Dynamic Method Dispatch


	}
}
