Que-1)

Display a program to execute two task concurrently
* task 1- Display 1-10
* task 2-Display 10-20

Que-2)

Display a program to execute three tasks concurrently
* task 1- Display 1-10
* task 2-Display 10-20
* task 3-Display 20-30

Que-3)

Develop a program to display value 1-x from multiple threads concurrently
take x value from other programmer whoever starting the thread Executing different logic from multiple thread concurrently.

Que-4)

Develop a program to display value 10-x, 30-y from multiple threads
Concurrently take x value from other programmer whoever starting the thread Executing different logic from multiple thread concurrently with the same input or diff input.

Que-6)

A typical example of simultaneous threads is that of an online Movie ticket reservation system.
Multiple users are trying to book seats/products at the same time. In this problem, you are writing a Ticker Dispenser in a BOOK MY SHOW APPLICATION SYSTEM.

* A TicketDispenser class is given to you. This class can give out a maximum of 200 tickets.

* In this class the maximum seats is already declared and assigned to the value of 200. Do not allot seats greater than this.

* Declare an integer variable called allotedSeats. This variable holds the current seat that is alloted.

* Declare a method allotSeatNumber():
This method should return the alloted seat number to the caller.
This method should start allotting seat numbers from 1 and allot seats in the increasing order. If all 200 seats have been allotted, return -1.
If Multiple threads are trying to use this class for seat allotment,
this class should be able to handle the multiple threads such that there is no thread interference or error.


* Use the class Tester.java to test the TicketDispenser class and its methods. Make sure you test the class for single and multi-threaded operations.

Que-7)
A typical example of simultaneous threads is that of a bank account where two people could be operating at the same time.
In this problem, we are writing an Account class.
 
* An Account class is given to you. This class is used to deposit and withdraw from the account.
* Declare an integer variable called balance. This variable holds the current balance of the account.
* Declare a method deposit(int amount):
* This method should add the given amount to balance. There is no need to validate amount. This method returns void.
* Declare a method withdraw(int amount):
* This method should subtract the given amount from balance. There is no need to validate amount. This method returns void.
* If Multiple threads are trying to use this class for operating the account, this class should be able to hand le the multiple threads
Such that there is no thread interference or error in the balance.

* Use the class AccountTester.java to test the Account class and its methods. Make sure you test the class for single and multi-threaded operations.
