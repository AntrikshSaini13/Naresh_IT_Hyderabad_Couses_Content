Simple Programs

1.Fill the code and the Output is "Welcome to NareshIT"

public class OopsTest
{
    public String nit()
    {
        return "Welcome ";
    }

    public static void main(String[] args)
    {
    	OopsTest n = new OopsTest();
        System.out.print(n.nit());
        OopsTest nit1 = new NIT();
        System.out.print(nit1.nit());
    }
}
class NIT extends OopsTest
{
    //Add code here
}	

Output : Welcome Welcome
		 "here is method override concept In method override with help of Supper class reference we can create the object of sub class
		 but in the sub class we did not override any method of super class than its print only  on super class method will not come 
		  any error"

2.	What is the output of the following code?
class NIT
{	
		int name;
		NIT(int name)
		{	
			this.name = name;
		}
}
public class OopsTest
{	
	public static void main(String[] args) 
	{	
		NIT f1 = new NIT(10);
		NIT f2 = new NIT(10);
		NIT f3 = f2;
		System.out.println(f1==f2); //false
		System.out.println(f2==f3); //true here is f3 and f2 both are refers to same object
		System.out.println(f1.name==f2.name); //true
		System.out.println(f2.name==f3.name); //true
		System.out.println(f1!=f3); //true
	}
}

Output:
false
true
true
true
true

3.	What is the output of the following code?
public class OopsTest 
{ 
	public static void main (String args [ ] ) 
	{ 
		int nit1 [ ] = new int [10];// here is create the object of class int and asigien the array of length 
		int nit2 [ ] = { 26,55,6,75,41 }; //here is array create
		int nit3 [ ] = { -5,2,44,558,66,-8 }; 
		System.out.println (nit1.length); 
		System.out.println (nit2.length); 
		System.out.println (nit3. length); 
	} 
}

Output :
10
5
6

here is create the object of class int 

4. Solve the below code having error
class NIT
{
	int a;//75
	public NIT(int a) {
		this.a=a;
	}
	
	static int getNum()
	{
		return this.a; // we can't use the this keyword inside the Satatic Class
	}
}
class NIT1 extends NIT
{
	int a;//152
	public NIT1(int a,int b) {
		super(a);
		this.a=b;
	}
	
	int getVal()
	{
		return this.a;
	}
}
class OopsMCQ{
public static void main(String[] args) {
	NIT1 nit = new NIT1(74,152);
	System.out.print(nit.getNum()+" "+nit.getVal()); //here we can't call the static method with object reference
	}
}

Output : Error

5.What is the output for the code given below?
class NIT
{
	static int a=90;
	String object;
	public NIT(String name) {
		this.object=name;
		NIT.this.a+=1; // here is 
	}
	static int get_counter()
	{
		return NIT.a;
	}
}

public class OopsTest
{
	public static void main(String[] args) {
		NIT nit = new NIT("nit");
		NIT nit1 = new NIT("nit");
		NIT nit2 = new NIT("nit");
		NIT nit3 = new NIT("nit");
		NIT nit4 = new NIT("nit");
		NIT nit5 = new NIT("nit");
		NIT nit6 = new NIT("nit");
		NIT nit7 = new NIT("nit");
		System.out.println(NIT.get_counter()-91);
	}
}


Output : 10

6.What is the output for the code given below?
class NIT
{
	static int a=90;
	String object;
	public NIT(String name) {
		this.object=name;
		NIT.this.a+=1;
	}
	static int get_counter()
	{
		return NIT.a;
	}
}

public class OopsTest
{
	public static void main(String[] args) {
		NIT nit = new NIT("nit");
		NIT nit1 = new NIT("nit");
		NIT nit2 = new NIT("nit");
		NIT nit3 = new NIT("nit");
		NIT nit4 = new NIT("nit");
		NIT nit5 = new NIT("nit");
		NIT nit6 = new NIT("nit");
		NIT nit7 = new NIT("nit");
		System.out.println(NIT.get_counter()-91);
	}
}

ouput :
7

7.What is the output of the following code?
class NIT
{
	public int nit() { 
		return 10;
	}
	
	protected  int nit1() 
	{
		return 5;
	}
}

class NIT1 extends NIT
{
	@Override
	public int nit() {
		return super.nit();
	}
	
	public int nit1() 
	{
		return 15;
	}
	
	private int nit2() 
	{
		return 20;
	}
}

class NIT2 extends NIT1
{
	public int nit() 
	{
		return 0;
		
	}
	
	int nit1() 
	{
		return 50;
	}
}
class OopsTest
{
	public static void main(String[] args) {
		NIT object = new NIT();
		NIT object1 = new NIT1();
		NIT object2 = new NIT2();
		NIT1 object3 = new NIT2();		System.out.println(object.nit()+object1.nit1()+object1.nit()+object3.nit1()+object2.nit1());
	}
}

8.	What is the output of the following code
class NIT{
	String name;
	public NIT(String name) {
		this.name=name;
	}
}
class NIT1 extends NIT{
	String programmingLanguage;
	public NIT1(String programmingLanguage, String name) {
		super(name);
		this.programmingLanguage=programmingLanguage;
	}
}
class NIT2 extends NIT{
	String faculty;
	public NIT2(String faculty) {
		super("Naresh");
		this.faculty=faculty;
	}
}
class OopsTest{
public static void main(String[] args) {
	NIT nit = new NIT("Project");
	System.out.print(nit.name+" ");
	NIT1 nit1= new NIT1("Java","NareshIT");
	System.out.print(nit1.name+" "+nit1.programmingLanguage+" ");
	NIT2 nit2 = new NIT2("Naidu");
	System.out.println(nit2.name+" "+nit2.faculty);
	}
}

Output :Inheritance apply here 
Project NareshIT Java Naresh Naidu


9.What is the output of the following code
class NIT
{
	static String val = "Welcome to nareshIT";
	String language;
	String faculty;
	String student;
	
	public NIT(String language, String faculty, String student) {
		this.faculty = faculty;
		this.language = language;
		this.student = student;
	}	
	public void get() 
	{
		System.out.println(this.faculty+" "+this.language+" "+this.student);
	}
}
pub;ic class OopsTest
{
	public static void main(String[] args) {
		NIT nit = new NIT("Java", "Naresh", "IT");
		nit.get();
	}
}

Output : Naresh Java IT


10.We found errors in line1, line2 and line3. How to resolve the errors in the below code
class NIT
{
	String val = "NareshIT";
	String language;
	String faculty;
	String student;
	
	public NIT(String language, String faculty, String student) {
		this.faculty = faculty;
		this.language = language;
		this.student = student;
	}
	
	static public String get() 
	{
		return val; // line 1
	}
	
	public void getValues() 
	{
		System.out.println(NIT.this.faculty+" "+NIT.language+" "+NIT.student); // line 2
	}
	
}

class OopsTest
{
	public static void main(String[] args) {
		System.out.println("Welcome to "+NIT.get());
		new NIT("Java", "Naresh", "IT");
		NIT.getValues(); // line 3
	}
}

Output :Error instance variable we can't access without Object

Q11) Find the output of the following Program

class Test
{
   public void access(byte b)
   {
	   System.out.println("byte is executed :"+b);
   }
   public void access(short b)
   {
	   System.out.println("short is executed :"+b);
   }
}
public class Main1 {

	public static void main(String[] args)
	{
	   Test t1 = new Test();
	   t1.access(15); // here argument is by default integer
	   
	}
}

Output : Error: Unresolved compilation problem: 
		 The method access(byte) in the type Test is not applicable for the arguments (int)


Q12) Find the output of the following Program
class A
{
	public void access(String x)
	  {
	    System.out.println("String is invoked :"+x);
	  }

	  public void access(Object x)
	  {
	    System.out.println("Object is invoked :"+x);
	  }
}
public class Main2 
{
   public static void main(String[] args) 
   {
	  A a1 = new A(); 
	  a1.access("Ravi");
	  a1.access(null);
   }
}

Output : 
String is invoked :Ravi
String is invoked :null


Q13) Find the output of the following Program.
class B
{
	  public void access(Integer x) 
	  {
	    System.out.println("Autoboxing is invoked :"+x);
	  }

	  public void access(long x)  
	  {
	    System.out.println("Widening is invoked :"+x);//Widening is invoked :15
	  }
}
public class Main3 {

	public static void main(String[] args) 
	{
		B b1 = new B();
		b1.access(15);

	}

}

Output :Widening is invoked :15

Q14) Find the output of the following Program

class C
{
	  public void access(Integer x) 
	  {
	    System.out.println("Autoboxing is invoked :"+x); //Autoboxing is invoked :15
	  }

	  public void access(int ...x) 
	  {
	    System.out.println("Var-Args is invoked :"+x);
	  }
}
public class Main4 {

	public static void main(String[] args) 
	{
		C c1 = new C();
		c1.access(15);

	}

}

OutPut :Autoboxing is invoked :15
 
Q15) Find the output of the following Program
class A
{
      public void access(Integer x) // Wapper class Not contain the  null
	  {
	    System.out.println("Integer is invoked :"+x);
	  }


	  public void access(String x)
	  {
	    System.out.println("String is invoked :"+x);
	  }	 
}
public class Main5
{
   public static void main(String[] args) 
   {
	  A a1 = new A(); 
	  a1.access("Ravi");
	  a1.access(null);
   }
}

Output :  Unresolved compilation problem: 
	      The method access(Integer) is ambiguous for the type A

Q16) Find the output of the following Program

class Check
{
   public void accept(int ...x, float ...y)// vrgs allow single only
   {
      System.out.println(x[0] +":"+y[0]);
   }
}
public class Test
{
  public static void main(String [] args)
  {
     Check c = new Check();
     c.accept(12,56,89.90F,67.56F);
  }
}

Output : Error: Unresolved compilation problem: 
		 The method accept(int[], float...) in the type Check is not applicable for the arguments (int, int, float, float)


Q17) Find the output of the following Program

class Super
{
	public void show()
	{
		System.out.println("Show method of super class!!!!");
	}
}
class Sub extends Super
{
	@Override
	protected void show() 
	{
		System.out.println("Show method of sub class!!!!");
	}
}
public class VisibilityMode 
{
	public static void main(String[] args) 
	{
		Super s = new Sub();
		s.show();
	}
}

Output : Error: Unresolved compilation problem: 
		 Cannot reduce the visibility of the inherited method from Super


Q18) Find the output of the following Program

class Super
{
	private void show()
	{
		System.out.println("Show method of super class!!!!");
	}
}
class Sub extends Super
{
	
	public void show() 
	{
		System.out.println("Show method of sub class!!!!");
	}
}
public class VisibilityMode 
{
	public static void main(String[] args) 
	{
		Super s = new Sub();
		s.show();
	}
}

Output : Error: Unresolved compilation problem: 
	     The method show() from the type Super is not visible
	     
	     Inside supper  class apply the method is private we can access the out side the class method name same

Q19) Find the output of the following Program

class Super
{
	public void access(int ...x)
	{
	  System.out.println("Var args method :"+x[0]);	
	}
}
class Sub extends Super
{	
	public void access(int x)
	{
	  System.out.println("Instance method :"+x);	
	}
	
}
public class Overriding 
{
	public static void main(String[] args)
	{
		Super s1 = new Super();  s1.access(10); here is calling only of superclass
		
		Sub s2 = new Sub(); s2.access(20); here is method overload
		
		Super s3 = new Sub(); s3.access(30); here is not method override
	}
}

Output :

Var args method :10
Instance method :20
Var args method :30


Q20) Find the output of the following Program
class Super
{
	public void access(long x)
	{
	  System.out.println("Widening");	
	}
}
class Sub extends Super
{	
	public void access(Integer x)
	{
	  System.out.println("Autoboxing");	
	}
	
}
public class OverloadingWithSuperAndSub 
{

	public static void main(String[] args)
	{
		Sub s1 = new Sub(); 
		s1.access(30);
	}
}

OutPut : Widening
 
 here is method overloading because of sub class and super class method are same but parameter different and 
 object created in sub  class inside the reference of sub class
