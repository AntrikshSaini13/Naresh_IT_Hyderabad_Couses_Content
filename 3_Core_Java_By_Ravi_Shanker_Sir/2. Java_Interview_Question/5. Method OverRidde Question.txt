Rules of jvm and compiler while sreaching method Overriding and method Hiding :
_______________________________________________________________________________
* Every method ( static / non static ) it will sreach in current refrence varaible.
* If the method found ( paramter and name matched),then it will sreach the type 
  Type will 
  |- static 
  |- non static 

* If the method found as static at once executed from the same place from 
  where it is sreach that is from the current refrence variable. 

* If the method found as non static then execution depends upon the current object.

* while sreaching the method the sreach only done in same class if the method is 
  not present in the same class then it will sreach in it's parent class but 
  never go in a srech of method in child class.

For Example :-

class A{
   static void m1(){ -------------------------------------------|
       System.out.println("A class static method");             |
     }                                                          |
   void m2(){ --------------------------------------------------|-----------------|
       System.out.println("A class non static method");         |                 |
     }                                                    Method hiding           |
                                                                |                 |
 }                                                              |                 |
                                                                |           Method Overriding
class B extends A{                                              |                 |
    static void m1(){-------------------------------------------|                 |
       System.out.println("B class static method");                               |
     }                                                                            |
   void m2(){---------------------------------------------------------------------|
       System.out.println("B class non static method");
     }
 }

 class Test{
     public static void main(String [] args)
      {
            A a =new A();
            a.m1();//  -------------- from A 
            a.m2();//  -------------- from A

            B b=new B();
            b.m1();// ---------------from B
            b.m2();// ---------------from B
      
           A a1=new B();
           a1.m1();// --------------from A ( compile time polymorphism)
           a1.m2();// --------------from B ( runtime polymorphism )
        }
 }

Rules of Overriding 
________________________
1. Overriding and Access Modifiers:
The access modifier while overriding a method can allow high scope, but not less scope. 
For example, a protected non static method in the superclass can be made public in child class,
but not private,in the child class.Doing so will generate a compile-time error. 

2.Final methods can not be overridden:
If we don’t want a method to be overridden, we declare it as final. 

3.Static methods can not be overridden: 
When you define a static method with the same signature in child class as a static method 
in the super class, it is known as method hiding.

4.Private methods can not be overridden:
Private methods cannot be overridden as they are bonded during compile time.
Therefore we can’t even override private methods in a child class.

5.The overriding method must have the same return type (or subtype):
From Java 5.0 onwards it is possible to have different return types for an overriding method in 
the child class, but the child’s return type should be a sub-type of the parent’s return type. 
This phenomenon is known as the covariant return type.

For Example:-
class SuperClass {
	public Object method()
	{
		System.out.println(
			"This is the method in SuperClass");
		return new Object();
	}
}

class ChildClass extends SuperClass {
	public Integer method()
	{
		System.out.println(
				"This is the method in ChildClass");
		return 1;
	}
}

public class Test {
	public static void main(String[] args)
	{
		SuperClass obj1 = new SuperClass();
		obj1.method();

		ChildClass obj2 = new ChildClass();
		obj2.method();
	}
}

6. Invoking overridden method from sub-class:
We can call the parent class method in the overriding method using the super keyword. 


Difference Between Method Overriding and Method Hiding in Java:-

* In method overriding both the method parent class and child class are non-static.
* In method Hiding both the method parent class and child class are static.
* In method Overriding method execution is done on the basis of the Object type.
* In method Hiding method execution is done on the basis of reference type.
* The version of the overridden non static method that gets invoked is the one 
  in the subclass.
* The version of the hidden static method that gets invoked depends on whether
  it is invoked from the superclass or the childclass. 


|- When we will go for the method overriding ?
|- Can we override the method in same class?
|- Can we do method hiding in the same class ?
|- can we do method overloading in the same class ?
|- can we do method overloading in another class ?
|- Why static method is known as method hiding if we declare it in 
   parent and child relation ?
|- what is compile time polymorphism ?
|- what is runtime polymorphism ?


