1. What is Encapsulation in Java? Why is it called Data hiding?

Ans : Encapsulation is a Java mechanism to integrating data (variables) and code (methods) 
      into a single unit. In encapsulation, a class's variables are hidden from other classes 
      and can only be accessed by the methods from other classes by setter and getter.

      Encapsulation follows the principle of information hiding, that is the internal 
      details of an object are hidden from the outside world, and only necessary information is 
      exposed through a controlled interface.

because data (variables) of access specfier are private modifier and all the code (methods) and 
constructor are public. 
______________________________________________________________________________________________

2. What are the important features of Encapsulation?
 
Encapsulation is a fundamental concept in object-oriented programming (OOP) that 
involves bundling data (variables) and methods (functions) that operate on the data 
into a single unit or class. It also restricts access to some of the object’s components 
to maintain control over the data and ensure security and integrity. Here are the key 
features of encapsulation:
1. Data Hiding 
2. Control Over Data
3. Increase Flexibility
4. Improved Code Organization
5. Security
6. Reusebility
7. Modulity

1. Data Hiding
---------------

Description: Encapsulation allows the internal representation of an object to be hidden 
from outside interference and misuse. Only the necessary details are exposed through 
public methods (also known as getters and setters).

Benefit: Prevents unintended access or modification of the internal state of an object, 
which helps in protecting the integrity of the data.

2. Control over Data
---------------------

Description: By providing methods to access or modify data (getters and setters), 
encapsulation allows developers to control how data is accessed and modified.

Benefit: It enables validation and control before data is modified, ensuring only
valid data is stored in the object.

3. Increased Flexibility
--------------------------

Description: The internal details of how data is stored can be changed without 
affecting external code that relies on the object, as long as the public interface 
remains consistent.

Benefit: Makes code easier to maintain and refactor since the internal implementation 
can change without requiring modifications in other parts of the system that use the object.

4. Improved Code Organization
--------------------------------

Description: Encapsulation promotes modularity by grouping related variables and 
methods into a class, making code more organized and easier to understand.

Benefit: Enhances readability, reusability, and maintainability of the code,
allowing for better modularization and code structure.

5. Security
------------

Description: Since access to data is controlled through public methods, encapsulation 
prevents unauthorized parts of the code from altering sensitive data.

Benefit: Ensures that only the intended parts of the code can modify an object’s state, 
enhancing the security and integrity of the system.

In summary, encapsulation is a technique that enhances security, maintainability, a
nd robustness by bundling data and behavior together and controlling access to that data.
_____________________________________________________________________________________________

3. What is the advantage of Encapsulation?

Encapsulation has many advantages in software systems, including: 
 
Data integrity: Encapsulation protects data from being modified or corrupted by 
accident. 
 
Security: Encapsulation prevents external code from accessing an object's internal 
workings, which improves the security of the data. 
 
Modularity: Encapsulation helps to create cleaner, more modular software. 
 
Maintainability: Encapsulation makes it easier to maintain code because changes to 
the implementation don't affect the rest of the program. 
 
Reusability: Encapsulation makes it easier to change and adapt code to new requirements. 
 
Organization: Encapsulation encourages programmers to group code related to a specific 
set of data into the same class, which makes it easier for other programmers to understand. 
 
Flexibility: Encapsulation allows variables to be set as read-only or write-only

We can change the code read-only or write-only by getter and setter method.
_____________________________________________________________________________________________
4. What are the main benefits of using encapsulation in Java?

Encapsulation is a powerful concept in Java that provides several key benefits, 
enhancing the design and functionality of a system. Here are the main benefits of 
using encapsulation:

1. Data Hiding

Description: Encapsulation allows internal implementation details of an object 
(variables and internal workings) to be hidden from the outside world. External 
code cannot access private data directly; it can only interact with it through 
controlled methods (getters and setters).

2. Controlled Access

Description: Through encapsulation, access to an object's data is controlled via 
methods. For instance, public getter and setter methods can be used to manage how 
data is accessed and modified.

3. Flexibility and Maintainability

Description: Encapsulation separates how an object behaves (its interface) from how 
it’s implemented internally. Changes to the internal implementation of a class (such 
as changing the way data is stored) do not affect other parts of the code that 
interact with the object.

4. Improved Code Readability and Reusability

Description: By grouping related variables and methods together inside a class, 
encapsulation makes code more modular and easier to understand. Each class has clear 
responsibilities, and it becomes easier to find and modify code when needed.

5. Enhancement of Security

Description: Since internal data is hidden and controlled by public methods, 
encapsulation helps prevent unauthorized access or manipulation of the data.

6. Reduced Complexity for Users

Description: Encapsulation abstracts the internal details and complexities of how an 
object works, providing a simple interface for interaction.

7. Better Collaboration in Large Projects

Description: In large teams, encapsulation helps prevent different parts of the code 
from depending too much on each other by exposing only the necessary parts of an object.

Ans : The Main benifits of encapsulation is "Security" because of we declares the data variables 
      as private by using private access specfier scope only inside the class and with the help of 
      method like setter and getter we can access the data of the outer class when access specfier. 
      thats way of integrating the variables and method in single unit.
      
Encapsulation allows collections to define protected access to elements, maintaining data integrity and security.
_____________________________________________________________________________________________
5. How to achieve encapsulation in Java? Give an example.

Ans : Encapsulation can be achieved by Declaring all the variables in the class as private and 
      writing public methods in the class to set and get the values of variables. It is more 
      defined with the setter and getter method.

In Java, encapsulation is achieved by following these steps:

Declare the variables of a class as private: This ensures that the data cannot 
be accessed directly from outside the class.

Provide public getter and setter methods: These methods are used to retrieve and 
update the values of the private variables. The setter methods can include validation 
to control the modification of the data.
______________________________________________________________________________________________

6. What is data hiding in Java?

Reasons Encapsulation is Called Data Hiding:

Access Restriction: Class variables are made private, so they cannot be accessed directly 
from outside the class. Only public methods (getters and setters) allow controlled access.

Controlled Modification: Using setters, you can control how data is modified. For example, 
in the above code, the setAge() method ensures that only positive values are allowed, preventing 
invalid data.

Security and Integrity: Hiding the data and exposing only necessary parts through controlled 
methods ensures the integrity and security of the object, as the internal state cannot be corrupted 
by external classes.
______________________________________________________________________________________________
7. How to achieve Data hiding programmatically?

// BLC 
class Student{
	// Instance Variable by access specfier as private now scope inside the class only
	private int stdId;
	private String stdName;
	
	// Non-Parameterized Constructor 
	Student(){
		super();
	}

	// Parameterized Constructor 
	Student(int stdId, String stdName){
		this.stdId = stdId;
		this.stdName = stdName;
	}
	
	// Setter method stdId
	public void setStudentId(int stdId){
		if(studentId<=0) {
			 System.err.println("Invalid Input");
		}
		else {
			this.studentId = studentId;
		}
		
	}
	
	// Getter method for stdId
	public int getStudentId() {
		return studentId;
	}

	// Setter method stdname
	public void setStudentName(String stdName){
		if(studentName.isEmpty()|| studentName.length()>=10) {
			System.err.println("Invalid Input");
		}
		else {
			this.studentName = studentName;
		}
	}

	// Getter method for stdName
	public int getStudentName() {
		return studentName;
	}

	// toString Method for getting the details of the class
	@Override
	public String toString() {
		return "Student [studentId=" + studentId + ", studentName=" + studentName + "]";
	}
}

// ELC
class Program{
	public static void main(String [] arg){
		Student st = new Student();
		st.stdStudentId(1);
		st.stdStudentName("Aman");
		sys(st.getStudentId());
		sys(st.getStudentName());
	}
}
______________________________________________________________________________________________

8. What is a Tightly encapsulated class in Java?

A tightly encapsulated class in Java is a class where all the instance variables (fields) are 
declared as private. This ensures that no data member can be accessed directly from outside the 
class, and interaction with these variables can only happen through controlled mechanisms like 
public getter and setter methods.

If a class is having only private variables and no other public method then a 
class is said to be tightly encapsulated class

All Data Members Are Private: Every variable in the class is marked as private, 
meaning no direct access to the variables from outside the class is allowed.

Controlled Access via Public Methods: The class provides public getter and 
setter methods to allow controlled access and modification of the private data members.
______________________________________________________________________________________________
9. What is the difference between Abstraction and Encapsulation?

Abstraction:
------------
1) Abstraction is an object-oriented programming (OOP) concept that focuses on hiding 
the internal implementation details of a class or object while exposing only the 
necessary functionalities to the user. The goal is to provide a simplified and clean 
interface without revealing the complex workings behind it.

2) Abstraction is a concept in object-oriented programming that focuses on hiding complex 
implementation details of codes and showing only the necessary aspects of an object or system
In Java, abstraction allows you to define methods in interfaces or abstract classes without 
providing their actual implementation.The actual implementation is left to the subclasses

Abstraction focuses on exposing only essential details and hiding implementation complexities. 
It’s achieved through interfaces and abstract classes.

Encapsulation:
--------------
Encapsulation is a Java mechanism to integrating data (variables) and code (methods) 
into a single unit. In encapsulation, a class's variables are hidden from other classes 
and can only be accessed by the methods from other classes.

Encapsulation is about hiding the internal data of an object and providing controlled access 
through methods (getters/setters).

______________________________________________________________________________________________
10. Can we achieve abstraction without encapsulation in Java?

Yes, In Java, abstraction can be achieved without encapsulation.

Abstraction focuses on exposing only essential details and hiding implementation details complexities. 
It’s achieved through interfaces and abstract classes.

Encapsulation is about hiding the internal data of an object and providing controlled access 
through methods (getters/setters).
_______________________________________________________________________________________________
11. What are getter and setter methods in Java?

In Java, getter and setter methods are used to access and modify private fields (attributes) 
of a class, maintaining encapsulation.

Getter method: Retrieves the value of a private field.
Setter method: Sets or updates the value of a private field.


This method is known as mutator method:
---------------------------------------
A mutator method in Java is another name for a setter method. It is used to modify or update 
the value of a private field in a class. The term "mutator" emphasizes the fact that the method 
allows the field's value to be changed or mutated.

Example:
--------
public void setName(String name) {
    this.name = name;  // Mutates the field's value
}
_______________________________________________________________________________________________
12. Does reflection violates encapsulation in Java?
_______________________________________________________________________________________________
13. Explain design pattern based on encapsulation in java?
    |- Factory design pattern 
_______________________________________________________________________________________________
14. How can the variable of the Encapsulation Test be accessed by 
    using getter and setter methods?

By using the getter and setter we can access the data of the class by Encapsulation and Encapsulation 
is concept to bundling/integrate the data (variable) and codes (methods) of the class in single unit.
In Encapsulation we are hiding of the data of class from the outer classes. only access and modified
of the data through the public method (getter and setter).

Program:
--------
// BLC
class Employee{

	// Instance Variable of the Class as private
	private int empId;
	privtae String empName;

	// Constructor
	public Employee(){
		super();
	}

	// Parameterized Constructor
	public Employee(int empId, String empName){
		this.empName = String empName;
		this.empId = empId;
	}

	// getter method
	public String getEmployeName(){
		return empName;
	}

	public int getEmployeId(){
		return empId;
	}

	// Setter method
	public void setEmployeName(String empName){
		this.empName = empName;
	}

	
	public void setEmployeId(int empId){
		this.empId = empId;
	}

	@Override
	public String toString(){
		return "Employee [EmployeeId=" + EmployeeId + ", EmployeeName=" + EmployeeName + "]";
	}
} 

// ELC
class EncapsulationTest{
	Employee emp = new Employee();

	// controlled and Modified the data by setter
	emp.setEmployeName("Aman");
	emp.setEmployeId(101);
	
	// 
	emp.gettEmployeName();
	emp.getEmployeId();
	
	sys(emp);
	
}
_______________________________________________________________________________________________
15.What is a final class as it relates to encapsulation?

A final class in Java is a class that cannot be extended or inherited by any other class.

Prevents Modification:
----------------------
Encapsulation Goal: Encapsulation hides the internal details of a class to prevent 
outside code from changing its behavior.

Final Class Benefit: Making a class final ensures that no other class can change 
or extend it, which means its behavior stays consistent.
_______________________________________________________________________________________________
16.While doing the concept of ecapsulation have you faced any drawback?
   if yes then what is the solution ?

Increased Boilerplate Code:
--------------------------
Drawback: Encapsulation requires additional code for getter and setter methods, which can 
make the class larger and more complex.

Solution: Use libraries like Lombok (in Java) to automatically generate these methods and 
reduce boilerplate code. For example:


Slight Performance Overhead:
----------------------------

Drawback: Accessing fields through methods (getters/setters) can introduce a small performance 
overhead compared to direct field access.

Solution: In most cases, this overhead is negligible. Only address it if performance profiling 
indicates a significant impact.

Over use of Setters:
-------------------

Drawback: Excessive use of setters can weaken encapsulation and lead to objects being modified 
in unintended ways.

Solution: Limit the use of setters. For critical fields, consider making the object immutable 
(unchangeable after creation) or include validation within setters. Example

Difficulty in Extending Classes:
---------------------------------

Drawback: Encapsulation can make it harder to extend or modify classes if fields are private 
and not accessible.

Solution: Use protected or package-private access where necessary to allow subclasses to 
interact with the fields, while still keeping other parts of the class private

Summary for an Interview:
---------------------------
Briefly describe the drawbacks: More code, minor performance hit, potential for overuse 
of setters, and challenges in extending classes.

Explain the solutions: Use tools to reduce boilerplate, profile performance impacts, 
limit setter use or use immutability, and choose appropriate access levels for extensibility.
______________________________________________________________________________________________
17. Encapsulation program with the proper validation ?

->/* 
 *  Combination of class members and methods
 *  as one unit is known as encapsulation 
 *  by writing the proper validation.
 * 
 */
class Student{
	 private int studentId;
	 private String studentName;
	 
	public Student() {
		super();
	}

	public Student(int studentId, String studentName) {
		super();
		this.studentId = studentId;
		this.studentName = studentName;
	}
	
	public int getStudentId() {
		return studentId;
	}

	public void setStudentId(int studentId) {
		if(studentId<=0) {
			 System.err.println("Invalid Input");
		}
		else {
		this.studentId = studentId;
		}
	}

	public String getStudentName() {
		return studentName;
	}

	public void setStudentName(String studentName) {
		if(studentName.isEmpty()|| studentName.length()>=10) {
			 System.err.println("Invalid Input");
		}
		else {
		this.studentName = studentName;
		}
	}

	@Override
	public String toString() {
		return "Student [studentId=" + studentId + ", studentName=" + studentName + "]";
	}
	 
}
public class Program03 {
public static void main(String[] args) {
	Student s=new Student();
	s.setStudentId(1);
	s.setStudentName("abcdefghijklmn");
	System.out.println(s.getStudentId()+" "+s.getStudentName());
	
	
}
}
_________________________________________________________________________________________
Encapsulation Program with method chaining ?

class Employee{
	 private String name;
	 private int id;
	 private String address;
	 private double salary;
	 
	public Employee() {
		super();
	}

	public Employee(String name, int id, String address, double salary) {
		super();
		this.name = name;
		this.id = id;
		this.address = address;
		this.salary = salary;
	}

	
	public String getName() {
		return name;
	}

	public Employee setName(String name) {
		this.name = name;
		return this;
	}

	public int getId() {
		return id;
	}

	public Employee setId(int id) {
		this.id = id;
		return this;
	}

	public String getAddress() {
		return address;
	}

	public Employee setAddress(String address) {
		this.address = address;
		return this;
	}

	public double getSalary() {
		return salary;
	}

	public Employee setSalary(double salary) {
		this.salary = salary;
		return this;
	}

	@Override
	public String toString() {
		return "Employee [name=" + name + ", id=" + id + ", address=" + address + ", salary=" + salary + "]";
	}
	
	public void displayDetails() {
		 System.out.println("Employee [name=" + name + ", id=" + id + ", address=" 
	     + address + ", salary=" + salary + "]");
	}
	 
}
public class Test01 {
public static void main(String[] args) {
	Employee e=new Employee();
	/*e.setId(1);
	e.setName("abc");
	e.setAddress("hyd");
	e.setSalary(50000);
	e.displayDetails();*/
	
	e.setName("virat")
	         .setId(2)
	             .setAddress("hyd")
	                   .setSalary(50000)
	                           .displayDetails();
		
	
}

______________________________________________________________________________________________________________________________________

